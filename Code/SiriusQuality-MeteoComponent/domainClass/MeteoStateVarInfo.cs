//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file C:\Users\mancealo\Documents\Sirius Quality\branches\TestMeteoOct\Code\SiriusQuality-MeteoComponent\XML\SiriusQualityMeteo_MeteoState.xml
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// Loic Manceau
/// loic.manceau@inra.fr
/// INRA
/// 
/// 
/// 10/6/2017 4:06:56 PM
/// 
namespace SiriusQualityMeteo
{
    using System;
    using CRA.ModelLayer.Core;
    
    
    /// <summary>MeteoStateVarInfoClasses contain the attributes for each variable in the domain class RainData. Attributes are valorized via the static constructor. The data-type VarInfo causes  a dependency to the assembly CRA.Core.Preconditions.dll</summary>
    public class MeteoStateVarInfo : IVarInfoClass
    {
        
        #region Private fields
        static VarInfo _minTair = new VarInfo();
        
        static VarInfo _maxTair = new VarInfo();
        
        static VarInfo _meanTair = new VarInfo();
        
        static VarInfo _vaporPressure = new VarInfo();
        
        static VarInfo _minShootTemperature = new VarInfo();
        
        static VarInfo _maxShootTemperature = new VarInfo();
        
        static VarInfo _dayLength = new VarInfo();
        
        static VarInfo _photoperiod = new VarInfo();
        
        static VarInfo _radTopAtm = new VarInfo();
        
        static VarInfo _HSlope = new VarInfo();
        
        static VarInfo _saturationVaporPressure = new VarInfo();
        
        static VarInfo _VPDair = new VarInfo();
        
        static VarInfo _VPDairCanopy = new VarInfo();
        
        static VarInfo _hourlyAirTemperature = new VarInfo();
        
        static VarInfo _hourlyVPDAir = new VarInfo();
        
        static VarInfo _hourlyRadiation = new VarInfo();
        
        static VarInfo _dayOfYear = new VarInfo();
        
        static VarInfo _solarRadiation = new VarInfo();
        
        static VarInfo _calculateHourly = new VarInfo();
        
        static VarInfo _RH = new VarInfo();
        
        static VarInfo _solarDeclination = new VarInfo();
        
        static VarInfo _hourlySolarElevation = new VarInfo();
        
        static VarInfo _hourlyIdir = new VarInfo();
        
        static VarInfo _hourlyIdiff = new VarInfo();
        
        static VarInfo _dailyIdir = new VarInfo();
        
        static VarInfo _dailyIdiff = new VarInfo();
        
        static VarInfo _dayLengthHorizonZero = new VarInfo();
        
        static VarInfo _radTopAtmHorizonZero = new VarInfo();
        
        static VarInfo _dailyMeanWindSpeed = new VarInfo();
        
        static VarInfo _dailyMaxWindSpeed = new VarInfo();
        
        static VarInfo _dailyMinWindSpeed = new VarInfo();
        
        static VarInfo _hourlyWindSpeed = new VarInfo();
        #endregion
        
        /// <summary>Constructor</summary>
        static MeteoStateVarInfo()
        {
            MeteoStateVarInfo.DescribeVariables();
        }
        
        #region IVarInfoClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "Domain class for the meteorology component";
            }
        }
        
        /// <summary>Reference to the ontology</summary>
        public  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Value domain class of reference</summary>
        public  string DomainClassOfReference
        {
            get
            {
                return "MeteoState";
            }
        }
        #endregion
        
        #region Public properties
        /// <summary>minimum air temperature</summary>
        public static  VarInfo minTair
        {
            get
            {
                return  _minTair;
            }
        }
        
        /// <summary>maximum air temperature</summary>
        public static  VarInfo maxTair
        {
            get
            {
                return  _maxTair;
            }
        }
        
        /// <summary>average air temperature </summary>
        public static  VarInfo meanTair
        {
            get
            {
                return  _meanTair;
            }
        }
        
        /// <summary>vapor pressure</summary>
        public static  VarInfo vaporPressure
        {
            get
            {
                return  _vaporPressure;
            }
        }
        
        /// <summary>minimum shoot temprature</summary>
        public static  VarInfo minShootTemperature
        {
            get
            {
                return  _minShootTemperature;
            }
        }
        
        /// <summary>maximum shoot temperature</summary>
        public static  VarInfo maxShootTemperature
        {
            get
            {
                return  _maxShootTemperature;
            }
        }
        
        /// <summary>length of the day taking into account atmosphere refraction sunset/rise -6°)</summary>
        public static  VarInfo dayLength
        {
            get
            {
                return  _dayLength;
            }
        }
        
        /// <summary>photoperiod</summary>
        public static  VarInfo photoperiod
        {
            get
            {
                return  _photoperiod;
            }
        }
        
        /// <summary>Exrtraterestrial radiations with dayLength (sunset/rise -6°)</summary>
        public static  VarInfo radTopAtm
        {
            get
            {
                return  _radTopAtm;
            }
        }
        
        /// <summary>Slope of saturated vapour pressure temperature curve at temperature T </summary>
        public static  VarInfo HSlope
        {
            get
            {
                return  _HSlope;
            }
        }
        
        /// <summary>saturation vapour pressure of water vapour at temperature T</summary>
        public static  VarInfo saturationVaporPressure
        {
            get
            {
                return  _saturationVaporPressure;
            }
        }
        
        /// <summary>VPDair</summary>
        public static  VarInfo VPDair
        {
            get
            {
                return  _VPDair;
            }
        }
        
        /// <summary>VPDairCanopy</summary>
        public static  VarInfo VPDairCanopy
        {
            get
            {
                return  _VPDairCanopy;
            }
        }
        
        /// <summary>hourly air temperature</summary>
        public static  VarInfo hourlyAirTemperature
        {
            get
            {
                return  _hourlyAirTemperature;
            }
        }
        
        /// <summary>hourly VPDair</summary>
        public static  VarInfo hourlyVPDAir
        {
            get
            {
                return  _hourlyVPDAir;
            }
        }
        
        /// <summary>hourly radiation</summary>
        public static  VarInfo hourlyRadiation
        {
            get
            {
                return  _hourlyRadiation;
            }
        }
        
        /// <summary>number of this day</summary>
        public static  VarInfo dayOfYear
        {
            get
            {
                return  _dayOfYear;
            }
        }
        
        /// <summary>daily radiation</summary>
        public static  VarInfo solarRadiation
        {
            get
            {
                return  _solarRadiation;
            }
        }
        
        /// <summary>calculate the hourly outputs only if this is true ( 1)</summary>
        public static  VarInfo calculateHourly
        {
            get
            {
                return  _calculateHourly;
            }
        }
        
        /// <summary>Hourly Relative Humidity</summary>
        public static  VarInfo RH
        {
            get
            {
                return  _RH;
            }
        }
        
        /// <summary>Solar Declination</summary>
        public static  VarInfo solarDeclination
        {
            get
            {
                return  _solarDeclination;
            }
        }
        
        /// <summary>Hourly sun elevation above the horizon</summary>
        public static  VarInfo hourlySolarElevation
        {
            get
            {
                return  _hourlySolarElevation;
            }
        }
        
        /// <summary>Hourly Incident beam irradiance at the top of the canopy</summary>
        public static  VarInfo hourlyIdir
        {
            get
            {
                return  _hourlyIdir;
            }
        }
        
        /// <summary>Hourly Incident diffuse irradiance at the top of the canopy</summary>
        public static  VarInfo hourlyIdiff
        {
            get
            {
                return  _hourlyIdiff;
            }
        }
        
        /// <summary>Daily Incident beam irradiance at the top of the canopy</summary>
        public static  VarInfo dailyIdir
        {
            get
            {
                return  _dailyIdir;
            }
        }
        
        /// <summary>Daily Incident diffuse irradiance at the top of the canopy</summary>
        public static  VarInfo dailyIdiff
        {
            get
            {
                return  _dailyIdiff;
            }
        }
        
        /// <summary>Length of the Day considering sunset/sunrise when sun elevation is exactly 0°</summary>
        public static  VarInfo dayLengthHorizonZero
        {
            get
            {
                return  _dayLengthHorizonZero;
            }
        }
        
        /// <summary>Exrtraterestrial radiations with dayLengthHorizon0 (sunset/rise -exactly 0°)</summary>
        public static  VarInfo radTopAtmHorizonZero
        {
            get
            {
                return  _radTopAtmHorizonZero;
            }
        }
        
        /// <summary>Mean daily Wind Speed</summary>
        public static  VarInfo dailyMeanWindSpeed
        {
            get
            {
                return  _dailyMeanWindSpeed;
            }
        }
        
        /// <summary>Maximum Daily Wind Speed</summary>
        public static  VarInfo dailyMaxWindSpeed
        {
            get
            {
                return  _dailyMaxWindSpeed;
            }
        }
        
        /// <summary>Minimum Daily Wind Speed</summary>
        public static  VarInfo dailyMinWindSpeed
        {
            get
            {
                return  _dailyMinWindSpeed;
            }
        }
        
        /// <summary>Hourly wind speed</summary>
        public static  VarInfo hourlyWindSpeed
        {
            get
            {
                return  _hourlyWindSpeed;
            }
        }
        #endregion
        
        #region VarInfo values
        /// <summary>Set VarInfo values</summary>
        static void DescribeVariables()
        {
            //   
            _minTair.Name = "minTair";
            _minTair.Description = "minimum air temperature";
            _minTair.MaxValue = 40D;
            _minTair.MinValue = -40D;
            _minTair.DefaultValue = 10D;
            _minTair.Units = "degree Celcius";
            _minTair.URL = "http://";
            _minTair.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _maxTair.Name = "maxTair";
            _maxTair.Description = "maximum air temperature";
            _maxTair.MaxValue = 50D;
            _maxTair.MinValue = -30D;
            _maxTair.DefaultValue = 20D;
            _maxTair.Units = "degree Celcius";
            _maxTair.URL = "http://";
            _maxTair.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _meanTair.Name = "meanTair";
            _meanTair.Description = "average air temperature ";
            _meanTair.MaxValue = 50D;
            _meanTair.MinValue = -40D;
            _meanTair.DefaultValue = 20D;
            _meanTair.Units = "degree Celcius";
            _meanTair.URL = "http://";
            _meanTair.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _vaporPressure.Name = "vaporPressure";
            _vaporPressure.Description = "vapor pressure";
            _vaporPressure.MaxValue = 1000D;
            _vaporPressure.MinValue = 0D;
            _vaporPressure.DefaultValue = 100D;
            _vaporPressure.Units = "P";
            _vaporPressure.URL = "http://";
            _vaporPressure.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _minShootTemperature.Name = "minShootTemperature";
            _minShootTemperature.Description = "minimum shoot temprature";
            _minShootTemperature.MaxValue = 40D;
            _minShootTemperature.MinValue = -40D;
            _minShootTemperature.DefaultValue = 10D;
            _minShootTemperature.Units = "degreeCelcius";
            _minShootTemperature.URL = "http://";
            _minShootTemperature.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _maxShootTemperature.Name = "maxShootTemperature";
            _maxShootTemperature.Description = "maximum shoot temperature";
            _maxShootTemperature.MaxValue = 50D;
            _maxShootTemperature.MinValue = -30D;
            _maxShootTemperature.DefaultValue = 20D;
            _maxShootTemperature.Units = "degree Celcius";
            _maxShootTemperature.URL = "http://";
            _maxShootTemperature.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _dayLength.Name = "dayLength";
            _dayLength.Description = "length of the day taking into account atmosphere refraction sunset/rise -6°)";
            _dayLength.MaxValue = 24D;
            _dayLength.MinValue = 0D;
            _dayLength.DefaultValue = 12D;
            _dayLength.Units = "hour";
            _dayLength.URL = "http://";
            _dayLength.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _photoperiod.Name = "photoperiod";
            _photoperiod.Description = "photoperiod";
            _photoperiod.MaxValue = 20D;
            _photoperiod.MinValue = 0D;
            _photoperiod.DefaultValue = 10D;
            _photoperiod.Units = "hour";
            _photoperiod.URL = "http://";
            _photoperiod.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _radTopAtm.Name = "radTopAtm";
            _radTopAtm.Description = "Exrtraterestrial radiations with dayLength (sunset/rise -6°)";
            _radTopAtm.MaxValue = 100D;
            _radTopAtm.MinValue = 0D;
            _radTopAtm.DefaultValue = 50D;
            _radTopAtm.Units = "MJ.m-2.s-1";
            _radTopAtm.URL = "http://";
            _radTopAtm.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _HSlope.Name = "HSlope";
            _HSlope.Description = "Slope of saturated vapour pressure temperature curve at temperature T ";
            _HSlope.MaxValue = 20D;
            _HSlope.MinValue = 0D;
            _HSlope.DefaultValue = 10D;
            _HSlope.Units = "hPa °C-1";
            _HSlope.URL = "http://";
            _HSlope.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _saturationVaporPressure.Name = "saturationVaporPressure";
            _saturationVaporPressure.Description = "saturation vapour pressure of water vapour at temperature T";
            _saturationVaporPressure.MaxValue = 20D;
            _saturationVaporPressure.MinValue = 0D;
            _saturationVaporPressure.DefaultValue = 10D;
            _saturationVaporPressure.Units = "hPa";
            _saturationVaporPressure.URL = "http://";
            _saturationVaporPressure.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _VPDair.Name = "VPDair";
            _VPDair.Description = "VPDair";
            _VPDair.MaxValue = 100D;
            _VPDair.MinValue = 0D;
            _VPDair.DefaultValue = 50D;
            _VPDair.Units = "hPa";
            _VPDair.URL = "http://";
            _VPDair.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _VPDairCanopy.Name = "VPDairCanopy";
            _VPDairCanopy.Description = "VPDairCanopy";
            _VPDairCanopy.MaxValue = 100D;
            _VPDairCanopy.MinValue = 0D;
            _VPDairCanopy.DefaultValue = 50D;
            _VPDairCanopy.Units = "hPa";
            _VPDairCanopy.URL = "http://";
            _VPDairCanopy.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _hourlyAirTemperature.Name = "hourlyAirTemperature";
            _hourlyAirTemperature.Description = "hourly air temperature";
            _hourlyAirTemperature.MaxValue = 50D;
            _hourlyAirTemperature.MinValue = -40D;
            _hourlyAirTemperature.DefaultValue = 10D;
            _hourlyAirTemperature.Units = "degree Celcius";
            _hourlyAirTemperature.URL = "http://";
            _hourlyAirTemperature.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _hourlyVPDAir.Name = "hourlyVPDAir";
            _hourlyVPDAir.Description = "hourly VPDair";
            _hourlyVPDAir.MaxValue = 100D;
            _hourlyVPDAir.MinValue = 0D;
            _hourlyVPDAir.DefaultValue = 50D;
            _hourlyVPDAir.Units = "hPa";
            _hourlyVPDAir.URL = "http://";
            _hourlyVPDAir.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _hourlyRadiation.Name = "hourlyRadiation";
            _hourlyRadiation.Description = "hourly radiation";
            _hourlyRadiation.MaxValue = 100D;
            _hourlyRadiation.MinValue = 0D;
            _hourlyRadiation.DefaultValue = 50D;
            _hourlyRadiation.Units = "MJ.m-2";
            _hourlyRadiation.URL = "http://";
            _hourlyRadiation.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _dayOfYear.Name = "dayOfYear";
            _dayOfYear.Description = "number of this day";
            _dayOfYear.MaxValue = 366D;
            _dayOfYear.MinValue = 1D;
            _dayOfYear.DefaultValue = 300D;
            _dayOfYear.Units = "day";
            _dayOfYear.URL = "http://";
            _dayOfYear.ValueType = VarInfoValueTypes.GetInstanceForName("Integer");
            //   
            _solarRadiation.Name = "solarRadiation";
            _solarRadiation.Description = "daily radiation";
            _solarRadiation.MaxValue = 100D;
            _solarRadiation.MinValue = 0D;
            _solarRadiation.DefaultValue = 50D;
            _solarRadiation.Units = "MJ.m-2";
            _solarRadiation.URL = "http://";
            _solarRadiation.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _calculateHourly.Name = "calculateHourly";
            _calculateHourly.Description = "calculate the hourly outputs only if this is true ( 1)";
            _calculateHourly.MaxValue = 1D;
            _calculateHourly.MinValue = 0D;
            _calculateHourly.DefaultValue = 0D;
            _calculateHourly.Units = "NA";
            _calculateHourly.URL = "http://";
            _calculateHourly.ValueType = VarInfoValueTypes.GetInstanceForName("Integer");
            //   
            _RH.Name = "RH";
            _RH.Description = "Hourly Relative Humidity";
            _RH.MaxValue = 100D;
            _RH.MinValue = 0D;
            _RH.DefaultValue = 10D;
            _RH.Units = "%";
            _RH.URL = "http://";
            _RH.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _solarDeclination.Name = "solarDeclination";
            _solarDeclination.Description = "Solar Declination";
            _solarDeclination.MaxValue = 1.571D;
            _solarDeclination.MinValue = -1.571D;
            _solarDeclination.DefaultValue = 0D;
            _solarDeclination.Units = "radians";
            _solarDeclination.URL = "http://";
            _solarDeclination.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _hourlySolarElevation.Name = "hourlySolarElevation";
            _hourlySolarElevation.Description = "Hourly sun elevation above the horizon";
            _hourlySolarElevation.MaxValue = 1.571D;
            _hourlySolarElevation.MinValue = -1.571D;
            _hourlySolarElevation.DefaultValue = 0D;
            _hourlySolarElevation.Units = "radians";
            _hourlySolarElevation.URL = "http://";
            _hourlySolarElevation.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _hourlyIdir.Name = "hourlyIdir";
            _hourlyIdir.Description = "Hourly Incident beam irradiance at the top of the canopy";
            _hourlyIdir.MaxValue = 0.01D;
            _hourlyIdir.MinValue = 0D;
            _hourlyIdir.DefaultValue = 0D;
            _hourlyIdir.Units = "MJ.m-2.s-1";
            _hourlyIdir.URL = "http://";
            _hourlyIdir.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _hourlyIdiff.Name = "hourlyIdiff";
            _hourlyIdiff.Description = "Hourly Incident diffuse irradiance at the top of the canopy";
            _hourlyIdiff.MaxValue = 0.01D;
            _hourlyIdiff.MinValue = 0D;
            _hourlyIdiff.DefaultValue = 0D;
            _hourlyIdiff.Units = "MJ.m-2.s-1";
            _hourlyIdiff.URL = "http://";
            _hourlyIdiff.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _dailyIdir.Name = "dailyIdir";
            _dailyIdir.Description = "Daily Incident beam irradiance at the top of the canopy";
            _dailyIdir.MaxValue = 0.01D;
            _dailyIdir.MinValue = 0D;
            _dailyIdir.DefaultValue = 0D;
            _dailyIdir.Units = "MJ.m-2.s-1";
            _dailyIdir.URL = "http://";
            _dailyIdir.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _dailyIdiff.Name = "dailyIdiff";
            _dailyIdiff.Description = "Daily Incident diffuse irradiance at the top of the canopy";
            _dailyIdiff.MaxValue = 0.01D;
            _dailyIdiff.MinValue = 0D;
            _dailyIdiff.DefaultValue = 0D;
            _dailyIdiff.Units = "MJ.m-2.s-1";
            _dailyIdiff.URL = "http://";
            _dailyIdiff.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _dayLengthHorizonZero.Name = "dayLengthHorizonZero";
            _dayLengthHorizonZero.Description = "Length of the Day considering sunset/sunrise when sun elevation is exactly 0°";
            _dayLengthHorizonZero.MaxValue = 24D;
            _dayLengthHorizonZero.MinValue = 0D;
            _dayLengthHorizonZero.DefaultValue = 12D;
            _dayLengthHorizonZero.Units = "hour";
            _dayLengthHorizonZero.URL = "http://";
            _dayLengthHorizonZero.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _radTopAtmHorizonZero.Name = "radTopAtmHorizonZero";
            _radTopAtmHorizonZero.Description = "Exrtraterestrial radiations with dayLengthHorizon0 (sunset/rise -exactly 0°)";
            _radTopAtmHorizonZero.MaxValue = 100D;
            _radTopAtmHorizonZero.MinValue = 0D;
            _radTopAtmHorizonZero.DefaultValue = 50D;
            _radTopAtmHorizonZero.Units = "MJ.m-2.s-1";
            _radTopAtmHorizonZero.URL = "http://";
            _radTopAtmHorizonZero.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _dailyMeanWindSpeed.Name = "dailyMeanWindSpeed";
            _dailyMeanWindSpeed.Description = "Mean daily Wind Speed";
            _dailyMeanWindSpeed.MaxValue = 1000000D;
            _dailyMeanWindSpeed.MinValue = 0D;
            _dailyMeanWindSpeed.DefaultValue = 10000D;
            _dailyMeanWindSpeed.Units = "m/d";
            _dailyMeanWindSpeed.URL = "http://";
            _dailyMeanWindSpeed.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _dailyMaxWindSpeed.Name = "dailyMaxWindSpeed";
            _dailyMaxWindSpeed.Description = "Maximum Daily Wind Speed";
            _dailyMaxWindSpeed.MaxValue = 5000000D;
            _dailyMaxWindSpeed.MinValue = 0D;
            _dailyMaxWindSpeed.DefaultValue = 200000D;
            _dailyMaxWindSpeed.Units = "m/d";
            _dailyMaxWindSpeed.URL = "http://";
            _dailyMaxWindSpeed.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _dailyMinWindSpeed.Name = "dailyMinWindSpeed";
            _dailyMinWindSpeed.Description = "Minimum Daily Wind Speed";
            _dailyMinWindSpeed.MaxValue = 5000000D;
            _dailyMinWindSpeed.MinValue = 0D;
            _dailyMinWindSpeed.DefaultValue = 100000D;
            _dailyMinWindSpeed.Units = "m/d";
            _dailyMinWindSpeed.URL = "http://";
            _dailyMinWindSpeed.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _hourlyWindSpeed.Name = "hourlyWindSpeed";
            _hourlyWindSpeed.Description = "Hourly wind speed";
            _hourlyWindSpeed.MaxValue = 5000000D;
            _hourlyWindSpeed.MinValue = 0D;
            _hourlyWindSpeed.DefaultValue = 200000D;
            _hourlyWindSpeed.Units = "m/d";
            _hourlyWindSpeed.URL = "http://";
            _hourlyWindSpeed.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
        }
        #endregion
    }
}
