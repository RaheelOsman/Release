//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file C:\Users\mouginot\Desktop\sirius\branches\MouginotJuly\Code\SiriusQuality-ThermalTime\XML\SiriusQualityThermalTime_ThermalTimeState.xml
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// MyName MyLastname
/// myemail@mydomain.com
/// MyInstitution
/// www.myinstitution.org
/// 
/// 30/11/2016 2:13:18 PM
/// 
namespace SiriusQualityThermalTime
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using CRA.ModelLayer.Core;
    using CRA.ModelLayer.ParametersManagement;
    
    
    /// <summary>ThermalTimeState Domain class contains the accessors to values</summary>
    [Serializable()]
    public class ThermalTimeState : ICloneable, IDomainClass
    {
        
        #region Private fields
        private double _minTair;
        
        private double _maxTair;
        
        private double _minTsoil;
        
        private double _maxTsoil;
        
        private double _minTshoot;
        
        private double _maxTshoot;
        
        private double[] _hourlyShootTemperature = new double[24];
        
        private double[] _hourlyAirTemperature = new double[24];
        
        private double _phaseValue;

        private double[] _deltaTT = new double[Enum.GetNames(typeof(Delta)).Length];
        
        private double[] _cumulTT = new double[Enum.GetNames(typeof(Delta)).Length];
        #endregion
        
        #region Private field for properties
        private ParametersIO _parametersIO;
        #endregion
        
        #region Constructor
        /// <summary>No parameters constructor</summary>
        public ThermalTimeState()
        {
            _parametersIO = new ParametersIO(this);
        }

                /// <summary>Copy constructor</summary>
        public ThermalTimeState(ThermalTimeState toCopy, bool copyAll)
        {
            _parametersIO = new ParametersIO(this);

            for (int i = 0; i < Enum.GetNames(typeof(Delta)).Length; i++)
            {
                _deltaTT[i] = toCopy._deltaTT[i];
                _cumulTT[i] = toCopy._cumulTT[i];
            }
            if (copyAll) //by default nothing is copied to improve performances ( only the output needed to be saved must be copied)
            {
                _minTair = toCopy._minTair;

                _maxTair = toCopy._maxTair;

                _minTshoot = toCopy._minTshoot;

                _maxTshoot = toCopy._maxTshoot;

                _minTsoil = toCopy._minTsoil;

                _maxTsoil = toCopy._maxTsoil;

                _phaseValue = toCopy._phaseValue;
               //Debug 
                if (toCopy._hourlyShootTemperature == null) _hourlyShootTemperature = null;
                else for (int i = 0; i < 24; i++) _hourlyShootTemperature[i] = toCopy._hourlyShootTemperature[i];

                if (toCopy._hourlyAirTemperature == null) _hourlyAirTemperature = null;
                else for (int i = 0; i < 24; i++) _hourlyAirTemperature[i] = toCopy._hourlyAirTemperature[i];

            }

        }

        #endregion
        
        #region Public properties
        /// <summary>minimum air temperature</summary>
        public double minTair
        {
            get
            {
                return this._minTair;
            }
            set
            {
                this._minTair = value;
            }
        }
        
        /// <summary>maximum air temperature</summary>
        public double maxTair
        {
            get
            {
                return this._maxTair;
            }
            set
            {
                this._maxTair = value;
            }
        }
        
        /// <summary>minimum soil temperature</summary>
        public double minTsoil
        {
            get
            {
                return this._minTsoil;
            }
            set
            {
                this._minTsoil = value;
            }
        }
        
        /// <summary>maximum soil temperature</summary>
        public double maxTsoil
        {
            get
            {
                return this._maxTsoil;
            }
            set
            {
                this._maxTsoil = value;
            }
        }
        
        /// <summary>minimum shoot temperature</summary>
        public double minTshoot
        {
            get
            {
                return this._minTshoot;
            }
            set
            {
                this._minTshoot = value;
            }
        }
        
        /// <summary>maximum shoot temperature</summary>
        public double maxTshoot
        {
            get
            {
                return this._maxTshoot;
            }
            set
            {
                this._maxTshoot = value;
            }
        }
        
        /// <summary>hourly shoot temperature</summary>
        public double[] hourlyShootTemperature
        {
            get
            {
                return this._hourlyShootTemperature;
            }
            set
            {
                this._hourlyShootTemperature = value;
            }
        }
        
        /// <summary>hourly air temperature</summary>
        public double[] hourlyAirTemperature
        {
            get
            {
                return this._hourlyAirTemperature;
            }
            set
            {
                this._hourlyAirTemperature = value;
            }
        }
        
        /// <summary>number of the current phase</summary>
        public double phaseValue
        {
            get
            {
                return this._phaseValue;
            }
            set
            {
                this._phaseValue = value;
            }
        }
        
        /// <summary>delta thermal time of the day. The index shows the kind of TT ( see the Delta enum)</summary>
        public double[] deltaTT
        {
            get
            {
                return this._deltaTT;
            }
            set
            {
                this._deltaTT = value;
            }
        }
        
        /// <summary>cumul thermal time from the beginning of the simulation to the current day. the index shows the kind of TT ( see the Delta enum)</summary>
        public double[] cumulTT
        {
            get
            {
                return this._cumulTT;
            }
            set
            {
                this._cumulTT = value;
            }
        }
        #endregion
        
        #region IDomainClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "Domain class for the thermal time component";
            }
        }
        
        /// <summary>Domain Class URL</summary>
        public virtual  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Domain Class Properties</summary>
        public virtual IDictionary<string, PropertyInfo> PropertiesDescription
        {
            get
            {
                return _parametersIO.GetCachedProperties(typeof(IDomainClass));
            }
        }
        #endregion
        
        /// <summary>Clears the values of the properties of the domain class by using the default value for the type of each property (e.g '0' for numbers, 'the empty string' for strings, etc.)</summary>
        public virtual Boolean ClearValues()
        {
            _minTair = default(System.Double);
            _maxTair = default(System.Double);
            _minTsoil = default(System.Double);
            _maxTsoil = default(System.Double);
            _minTshoot = default(System.Double);
            _maxTshoot = default(System.Double);
            _hourlyShootTemperature = new double[24];
            _hourlyAirTemperature = new double[24];
            _phaseValue = default(System.Double);
            _deltaTT = new double[Enum.GetNames(typeof(Delta)).Length];
            _cumulTT = new double[Enum.GetNames(typeof(Delta)).Length];
            // Returns true if everything is ok
            return true;
        }
        
        #region Clone
        /// <summary>Implement ICloneable.Clone()</summary>
        public virtual Object Clone()
        {
            // Shallow copy by default
            IDomainClass myclass = (IDomainClass) this.MemberwiseClone();
            _parametersIO.PopulateClonedCopy(myclass);
            return myclass;
        }
        #endregion

        ///<summary>Enumerate the available delta sensor fields</summary>
        public enum Delta
        {
            ///<summary>Delta on shoot temperature (based on the soil temperature until leaf # reach MaxLeafSoil and then on canopy temperature)</summary>
            Shoot,

            ///<summary>Delta on air temperature (based on the weather files)</summary>
            Air,

            ///<summary>Delta on soil temperature</summary>
            Soil,

            ///<summary>Delta on leaf senescence temperature</summary>
            LeafSenescence,

            /// <summary>Delta on N and DM remobilization</summary> 
            Remobilization,

            /// <summary>Delta on physiological temperature</summary>
            Physiology,

            /// <summary>Delta used for the phenology of the maize </summary>
            PhenoMaize
        }
    }
}
