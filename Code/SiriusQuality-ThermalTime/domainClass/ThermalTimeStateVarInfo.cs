//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file C:\Users\mouginot\Desktop\sirius\branches\MouginotJuly\Code\SiriusQuality-ThermalTime\XML\SiriusQualityThermalTime_ThermalTimeState.xml
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// MyName MyLastname
/// myemail@mydomain.com
/// MyInstitution
/// www.myinstitution.org
/// 
/// 30/11/2016 2:13:18 PM
/// 
namespace SiriusQualityThermalTime
{
    using System;
    using CRA.ModelLayer.Core;
    
    
    /// <summary>ThermalTimeStateVarInfoClasses contain the attributes for each variable in the domain class RainData. Attributes are valorized via the static constructor. The data-type VarInfo causes  a dependency to the assembly CRA.Core.Preconditions.dll</summary>
    public class ThermalTimeStateVarInfo : IVarInfoClass
    {
        
        #region Private fields
        static VarInfo _minTair = new VarInfo();
        
        static VarInfo _maxTair = new VarInfo();
        
        static VarInfo _minTsoil = new VarInfo();
        
        static VarInfo _maxTsoil = new VarInfo();
        
        static VarInfo _minTshoot = new VarInfo();
        
        static VarInfo _maxTshoot = new VarInfo();
        
        static VarInfo _hourlyShootTemperature = new VarInfo();
        
        static VarInfo _hourlyAirTemperature = new VarInfo();
        
        static VarInfo _phaseValue = new VarInfo();
        
        static VarInfo _deltaTT = new VarInfo();
        
        static VarInfo _cumulTT = new VarInfo();
        #endregion
        
        /// <summary>Constructor</summary>
        static ThermalTimeStateVarInfo()
        {
            ThermalTimeStateVarInfo.DescribeVariables();
        }
        
        #region IVarInfoClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "Domain class for the thermal time component";
            }
        }
        
        /// <summary>Reference to the ontology</summary>
        public  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Value domain class of reference</summary>
        public  string DomainClassOfReference
        {
            get
            {
                return "ThermalTimeState";
            }
        }
        #endregion
        
        #region Public properties
        /// <summary>minimum air temperature</summary>
        public static  VarInfo minTair
        {
            get
            {
                return  _minTair;
            }
        }
        
        /// <summary>maximum air temperature</summary>
        public static  VarInfo maxTair
        {
            get
            {
                return  _maxTair;
            }
        }
        
        /// <summary>minimum soil temperature</summary>
        public static  VarInfo minTsoil
        {
            get
            {
                return  _minTsoil;
            }
        }
        
        /// <summary>maximum soil temperature</summary>
        public static  VarInfo maxTsoil
        {
            get
            {
                return  _maxTsoil;
            }
        }
        
        /// <summary>minimum shoot temperature</summary>
        public static  VarInfo minTshoot
        {
            get
            {
                return  _minTshoot;
            }
        }
        
        /// <summary>maximum shoot temperature</summary>
        public static  VarInfo maxTshoot
        {
            get
            {
                return  _maxTshoot;
            }
        }
        
        /// <summary>hourly shoot temperature</summary>
        public static  VarInfo hourlyShootTemperature
        {
            get
            {
                return  _hourlyShootTemperature;
            }
        }
        
        /// <summary>hourly air temperature</summary>
        public static  VarInfo hourlyAirTemperature
        {
            get
            {
                return  _hourlyAirTemperature;
            }
        }
        
        /// <summary>number of the current phase</summary>
        public static  VarInfo phaseValue
        {
            get
            {
                return  _phaseValue;
            }
        }
        
        /// <summary>delta thermal time of the day. The index shows the kind of TT ( see the Delta enum)</summary>
        public static  VarInfo deltaTT
        {
            get
            {
                return  _deltaTT;
            }
        }
        
        /// <summary>cumul thermal time from the beginning of the simulation to the current day. the index shows the kind of TT ( see the Delta enum)</summary>
        public static  VarInfo cumulTT
        {
            get
            {
                return  _cumulTT;
            }
        }
        #endregion
        
        #region VarInfo values
        /// <summary>Set VarInfo values</summary>
        static void DescribeVariables()
        {
            //   
            _minTair.Name = "minTair";
            _minTair.Description = "minimum air temperature";
            _minTair.MaxValue = 40D;
            _minTair.MinValue = -30D;
            _minTair.DefaultValue = 10D;
            _minTair.Units = "°C";
            _minTair.URL = "http://";
            _minTair.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _maxTair.Name = "maxTair";
            _maxTair.Description = "maximum air temperature";
            _maxTair.MaxValue = 50D;
            _maxTair.MinValue = -20D;
            _maxTair.DefaultValue = 20D;
            _maxTair.Units = "°C";
            _maxTair.URL = "http://";
            _maxTair.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _minTsoil.Name = "minTsoil";
            _minTsoil.Description = "minimum soil temperature";
            _minTsoil.MaxValue = 40D;
            _minTsoil.MinValue = -30D;
            _minTsoil.DefaultValue = 10D;
            _minTsoil.Units = "°C";
            _minTsoil.URL = "http://";
            _minTsoil.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _maxTsoil.Name = "maxTsoil";
            _maxTsoil.Description = "maximum soil temperature";
            _maxTsoil.MaxValue = 50D;
            _maxTsoil.MinValue = -20D;
            _maxTsoil.DefaultValue = 20D;
            _maxTsoil.Units = "°C";
            _maxTsoil.URL = "http://";
            _maxTsoil.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _minTshoot.Name = "minTshoot";
            _minTshoot.Description = "minimum shoot temperature";
            _minTshoot.MaxValue = 40D;
            _minTshoot.MinValue = -30D;
            _minTshoot.DefaultValue = 10D;
            _minTshoot.Units = "°C";
            _minTshoot.URL = "http://";
            _minTshoot.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _maxTshoot.Name = "maxTshoot";
            _maxTshoot.Description = "maximum shoot temperature";
            _maxTshoot.MaxValue = 50D;
            _maxTshoot.MinValue = -20D;
            _maxTshoot.DefaultValue = 20D;
            _maxTshoot.Units = "°C";
            _maxTshoot.URL = "http://";
            _maxTshoot.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _hourlyShootTemperature.Name = "hourlyShootTemperature";
            _hourlyShootTemperature.Description = "hourly shoot temperature";
            _hourlyShootTemperature.MaxValue = 50D;
            _hourlyShootTemperature.MinValue = -30D;
            _hourlyShootTemperature.DefaultValue = 20D;
            _hourlyShootTemperature.Units = "°C";
            _hourlyShootTemperature.URL = "http://";
            _hourlyShootTemperature.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _hourlyAirTemperature.Name = "hourlyAirTemperature";
            _hourlyAirTemperature.Description = "hourly air temperature";
            _hourlyAirTemperature.MaxValue = 50D;
            _hourlyAirTemperature.MinValue = -30D;
            _hourlyAirTemperature.DefaultValue = 20D;
            _hourlyAirTemperature.Units = "°C";
            _hourlyAirTemperature.URL = "http://";
            _hourlyAirTemperature.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _phaseValue.Name = "phaseValue";
            _phaseValue.Description = "number of the current phase";
            _phaseValue.MaxValue = 8D;
            _phaseValue.MinValue = 0D;
            _phaseValue.DefaultValue = 0D;
            _phaseValue.Units = "NA";
            _phaseValue.URL = "http://";
            _phaseValue.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _deltaTT.Name = "deltaTT";
            _deltaTT.Description = "delta thermal time of the day. The index shows the kind of TT ( see the Delta enu" +
                "m)";
            _deltaTT.MaxValue = 50D;
            _deltaTT.MinValue = 0D;
            _deltaTT.DefaultValue = 10D;
            _deltaTT.Units = "°C";
            _deltaTT.URL = "http://";
            _deltaTT.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _cumulTT.Name = "cumulTT";
            _cumulTT.Description = "cumul thermal time from the beginning of the simulation to the current day. the i" +
                "ndex shows the kind of TT ( see the Delta enum)";
            _cumulTT.MaxValue = 1000D;
            _cumulTT.MinValue = 0D;
            _cumulTT.DefaultValue = 0D;
            _cumulTT.Units = "°C/d";
            _cumulTT.URL = "http://";
            _cumulTT.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
        }
        #endregion
    }
}
