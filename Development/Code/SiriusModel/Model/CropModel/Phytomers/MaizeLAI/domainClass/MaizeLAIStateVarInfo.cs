//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file C:\Users\mouginot\Desktop\sirius\branches\MouginotJuly\Code\SiriusModel\Model\CropModel\Phytomers\MaizeLAI\XML\SiriusQualityMaizeLAI_MaizeLAIState.xml
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// MyName MyLastname
/// myemail@mydomain.com
/// MyInstitution
/// www.myinstitution.org
/// 
/// 15/12/2016 12:19:12 PM
/// 
namespace SiriusQualityMaizeLAI
{
    using System;
    using CRA.ModelLayer.Core;
    
    
    /// <summary>MaizeLAIStateVarInfoClasses contain the attributes for each variable in the domain class RainData. Attributes are valorized via the static constructor. The data-type VarInfo causes  a dependency to the assembly CRA.Core.Preconditions.dll</summary>
    public class MaizeLAIStateVarInfo : IVarInfoClass
    {
        
        #region Private fields
        static VarInfo _newLeafHasAppeared = new VarInfo();
        
        static VarInfo _leafNumber = new VarInfo();
        
        static VarInfo _finalLeafNumber = new VarInfo();
        
        static VarInfo _roundedFinalLeafNumber = new VarInfo();
        
        static VarInfo _isSmallPhytomer = new VarInfo();
        
        static VarInfo _phytonum = new VarInfo();
        
        static VarInfo _index = new VarInfo();
        
        static VarInfo _MaximumPotentialLaminaeAI = new VarInfo();
        
        static VarInfo _MaximumPotentialSheathAI = new VarInfo();
        
        static VarInfo _FPAW = new VarInfo();
        
        static VarInfo _isPotentialLAI = new VarInfo();
        
        static VarInfo _VPDairCanopy = new VarInfo();
        
        static VarInfo _DSF = new VarInfo();
        
        static VarInfo _DEF = new VarInfo();
        
        static VarInfo _incDeltaAreaLimitSF = new VarInfo();
        
        static VarInfo _WaterLimitedPotDeltaAIList = new VarInfo();
        
        static VarInfo _potentialIncDeltaArea = new VarInfo();

        static VarInfo _leafStateList = new VarInfo();
        
        static VarInfo _isPrematurelyDying = new VarInfo();
        
        static VarInfo _tilleringProfile = new VarInfo();
        
        static VarInfo _leafTillerNumberArray = new VarInfo();
        
        static VarInfo _deltaTTCanopyHourly = new VarInfo();
        
        static VarInfo _VPDeq = new VarInfo();
        
        static VarInfo _hLER = new VarInfo();
        
        static VarInfo _LER = new VarInfo();
        
        static VarInfo _cumulTTPHenoMaize = new VarInfo();
        
        static VarInfo _deltaTTPhenoMaize = new VarInfo();
        
        static VarInfo _WaterLimitedPotExposedDeltaAIList = new VarInfo();
        #endregion
        
        /// <summary>Constructor</summary>
        static MaizeLAIStateVarInfo()
        {
            MaizeLAIStateVarInfo.DescribeVariables();
        }
        
        #region IVarInfoClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "Domain class description";
            }
        }
        
        /// <summary>Reference to the ontology</summary>
        public  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Value domain class of reference</summary>
        public  string DomainClassOfReference
        {
            get
            {
                return "MaizeLAIState";
            }
        }
        #endregion
        
        #region Public properties
        /// <summary></summary>
        public static  VarInfo newLeafHasAppeared
        {
            get
            {
                return  _newLeafHasAppeared;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo leafNumber
        {
            get
            {
                return  _leafNumber;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo finalLeafNumber
        {
            get
            {
                return  _finalLeafNumber;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo roundedFinalLeafNumber
        {
            get
            {
                return  _roundedFinalLeafNumber;
            }
        }
        
        /// <summary>true if the last phytomer appeared is "small"</summary>
        public static  VarInfo isSmallPhytomer
        {
            get
            {
                return  _isSmallPhytomer;
            }
        }
        
        /// <summary>phytonum of the last phytomer appeared</summary>
        public static  VarInfo phytonum
        {
            get
            {
                return  _phytonum;
            }
        }
        
        /// <summary>index of the  last phytomer</summary>
        public static  VarInfo index
        {
            get
            {
                return  _index;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo MaximumPotentialLaminaeAI
        {
            get
            {
                return  _MaximumPotentialLaminaeAI;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo MaximumPotentialSheathAI
        {
            get
            {
                return  _MaximumPotentialSheathAI;
            }
        }
        
        /// <summary>Fraction of plant available water</summary>
        public static  VarInfo FPAW
        {
            get
            {
                return  _FPAW;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo isPotentialLAI
        {
            get
            {
                return  _isPotentialLAI;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo VPDairCanopy
        {
            get
            {
                return  _VPDairCanopy;
            }
        }
        
        /// <summary>drought senescence factor</summary>
        public static  VarInfo DSF
        {
            get
            {
                return  _DSF;
            }
        }
        
        /// <summary>drought expansion factor</summary>
        public static  VarInfo DEF
        {
            get
            {
                return  _DEF;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo incDeltaAreaLimitSF
        {
            get
            {
                return  _incDeltaAreaLimitSF;
            }
        }
        
        /// <summary>list on each phytomer</summary>
        public static  VarInfo WaterLimitedPotDeltaAIList
        {
            get
            {
                return  _WaterLimitedPotDeltaAIList;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo potentialIncDeltaArea
        {
            get
            {
                return  _potentialIncDeltaArea;
            }
        }
        
        /// <summary> see the LeafState enum</summary>
        public static VarInfo leafStateList
        {
            get
            {
                return _leafStateList;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo isPrematurelyDying
        {
            get
            {
                return  _isPrematurelyDying;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo tilleringProfile
        {
            get
            {
                return  _tilleringProfile;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo leafTillerNumberArray
        {
            get
            {
                return  _leafTillerNumberArray;
            }
        }
        
        /// <summary></summary>
        public static  VarInfo deltaTTCanopyHourly
        {
            get
            {
                return  _deltaTTCanopyHourly;
            }
        }
        
        /// <summary></summary>
        public static  VarInfo VPDeq
        {
            get
            {
                return  _VPDeq;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo hLER
        {
            get
            {
                return  _hLER;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo LER
        {
            get
            {
                return  _LER;
            }
        }
        
        /// <summary></summary>
        public static  VarInfo cumulTTPHenoMaize
        {
            get
            {
                return  _cumulTTPHenoMaize;
            }
        }
        
        /// <summary></summary>
        public static  VarInfo deltaTTPhenoMaize
        {
            get
            {
                return  _deltaTTPhenoMaize;
            }
        }
        
        /// <summary>list on each phytomer</summary>
        public static  VarInfo WaterLimitedPotExposedDeltaAIList
        {
            get
            {
                return  _WaterLimitedPotExposedDeltaAIList;
            }
        }
        #endregion
        
        #region VarInfo values
        /// <summary>Set VarInfo values</summary>
        static void DescribeVariables()
        {
            //   
            _newLeafHasAppeared.Name = "newLeafHasAppeared";
            _newLeafHasAppeared.Description = "";
            _newLeafHasAppeared.MaxValue = 1D;
            _newLeafHasAppeared.MinValue = 0D;
            _newLeafHasAppeared.DefaultValue = 0D;
            _newLeafHasAppeared.Units = "NA";
            _newLeafHasAppeared.URL = "http://";
            _newLeafHasAppeared.ValueType = VarInfoValueTypes.GetInstanceForName("Integer");
            //   
            _leafNumber.Name = "leafNumber";
            _leafNumber.Description = " ";
            _leafNumber.MaxValue = 20D;
            _leafNumber.MinValue = 0D;
            _leafNumber.DefaultValue = 0D;
            _leafNumber.Units = "leaf";
            _leafNumber.URL = "http://";
            _leafNumber.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _finalLeafNumber.Name = "finalLeafNumber";
            _finalLeafNumber.Description = " ";
            _finalLeafNumber.MaxValue = 20D;
            _finalLeafNumber.MinValue = 0D;
            _finalLeafNumber.DefaultValue = 10D;
            _finalLeafNumber.Units = "leaf";
            _finalLeafNumber.URL = "http://";
            _finalLeafNumber.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _roundedFinalLeafNumber.Name = "roundedFinalLeafNumber";
            _roundedFinalLeafNumber.Description = " ";
            _roundedFinalLeafNumber.MaxValue = 20D;
            _roundedFinalLeafNumber.MinValue = 0D;
            _roundedFinalLeafNumber.DefaultValue = 10D;
            _roundedFinalLeafNumber.Units = "leaf";
            _roundedFinalLeafNumber.URL = "http://";
            _roundedFinalLeafNumber.ValueType = VarInfoValueTypes.GetInstanceForName("Integer");
            //   
            _isSmallPhytomer.Name = "isSmallPhytomer";
            _isSmallPhytomer.Description = "true if the last phytomer appeared is \"small\"";
            _isSmallPhytomer.MaxValue = 1D;
            _isSmallPhytomer.MinValue = 0D;
            _isSmallPhytomer.DefaultValue = 0D;
            _isSmallPhytomer.Units = "NA";
            _isSmallPhytomer.URL = "http://";
            _isSmallPhytomer.ValueType = VarInfoValueTypes.GetInstanceForName("Integer");
            //   
            _phytonum.Name = "phytonum";
            _phytonum.Description = "phytonum of the last phytomer appeared";
            _phytonum.MaxValue = 21D;
            _phytonum.MinValue = 1D;
            _phytonum.DefaultValue = 1D;
            _phytonum.Units = "NA";
            _phytonum.URL = "http://";
            _phytonum.ValueType = VarInfoValueTypes.GetInstanceForName("Integer");
            //   
            _index.Name = "index";
            _index.Description = "index of the  last phytomer";
            _index.MaxValue = 20D;
            _index.MinValue = 0D;
            _index.DefaultValue = 0D;
            _index.Units = "NA";
            _index.URL = "http://";
            _index.ValueType = VarInfoValueTypes.GetInstanceForName("Integer");
            //   
            _MaximumPotentialLaminaeAI.Name = "MaximumPotentialLaminaeAI";
            _MaximumPotentialLaminaeAI.Description = " ";
            _MaximumPotentialLaminaeAI.MaxValue = 100D;
            _MaximumPotentialLaminaeAI.MinValue = 0D;
            _MaximumPotentialLaminaeAI.DefaultValue = 0D;
            _MaximumPotentialLaminaeAI.Units = " ";
            _MaximumPotentialLaminaeAI.URL = "http://";
            _MaximumPotentialLaminaeAI.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _MaximumPotentialSheathAI.Name = "MaximumPotentialSheathAI";
            _MaximumPotentialSheathAI.Description = " ";
            _MaximumPotentialSheathAI.MaxValue = 100D;
            _MaximumPotentialSheathAI.MinValue = 0D;
            _MaximumPotentialSheathAI.DefaultValue = 0D;
            _MaximumPotentialSheathAI.Units = " ";
            _MaximumPotentialSheathAI.URL = "http://";
            _MaximumPotentialSheathAI.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _FPAW.Name = "FPAW";
            _FPAW.Description = "Fraction of plant available water";
            _FPAW.MaxValue = 1D;
            _FPAW.MinValue = 0D;
            _FPAW.DefaultValue = 0.5D;
            _FPAW.Units = "dimensionless";
            _FPAW.URL = "http://";
            _FPAW.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _isPotentialLAI.Name = "isPotentialLAI";
            _isPotentialLAI.Description = " ";
            _isPotentialLAI.MaxValue = 1D;
            _isPotentialLAI.MinValue = 0D;
            _isPotentialLAI.DefaultValue = 0D;
            _isPotentialLAI.Units = "NA";
            _isPotentialLAI.URL = "http://";
            _isPotentialLAI.ValueType = VarInfoValueTypes.GetInstanceForName("Integer");
            //   
            _VPDairCanopy.Name = "VPDairCanopy";
            _VPDairCanopy.Description = " ";
            _VPDairCanopy.MaxValue = 100D;
            _VPDairCanopy.MinValue = 0D;
            _VPDairCanopy.DefaultValue = 0D;
            _VPDairCanopy.Units = " ";
            _VPDairCanopy.URL = "http://";
            _VPDairCanopy.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _DSF.Name = "DSF";
            _DSF.Description = "drought senescence factor";
            _DSF.MaxValue = 10D;
            _DSF.MinValue = 0D;
            _DSF.DefaultValue = 0D;
            _DSF.Units = " ";
            _DSF.URL = "http://";
            _DSF.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _DEF.Name = "DEF";
            _DEF.Description = "drought expansion factor";
            _DEF.MaxValue = 10D;
            _DEF.MinValue = 0D;
            _DEF.DefaultValue = 0D;
            _DEF.Units = " ";
            _DEF.URL = "http://";
            _DEF.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _incDeltaAreaLimitSF.Name = "incDeltaAreaLimitSF";
            _incDeltaAreaLimitSF.Description = " ";
            _incDeltaAreaLimitSF.MaxValue = 1D;
            _incDeltaAreaLimitSF.MinValue = 0D;
            _incDeltaAreaLimitSF.DefaultValue = 0D;
            _incDeltaAreaLimitSF.Units = " ";
            _incDeltaAreaLimitSF.URL = "http://";
            _incDeltaAreaLimitSF.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _WaterLimitedPotDeltaAIList.Name = "WaterLimitedPotDeltaAIList";
            _WaterLimitedPotDeltaAIList.Description = "list on each phytomer";
            _WaterLimitedPotDeltaAIList.MaxValue = 0D;
            _WaterLimitedPotDeltaAIList.MinValue = 0D;
            _WaterLimitedPotDeltaAIList.DefaultValue = 0D;
            _WaterLimitedPotDeltaAIList.Units = " ";
            _WaterLimitedPotDeltaAIList.URL = "http://";
            _WaterLimitedPotDeltaAIList.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _potentialIncDeltaArea.Name = "potentialIncDeltaArea";
            _potentialIncDeltaArea.Description = " ";
            _potentialIncDeltaArea.MaxValue = 10D;
            _potentialIncDeltaArea.MinValue = 0D;
            _potentialIncDeltaArea.DefaultValue = 0D;
            _potentialIncDeltaArea.Units = " ";
            _potentialIncDeltaArea.URL = "http://";
            _potentialIncDeltaArea.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _leafStateList.Name = "leafStateList";
            _leafStateList.Description = " see the LeafState enum";
            _leafStateList.MaxValue = 0D;
            _leafStateList.MinValue = 0D;
            _leafStateList.DefaultValue = 0D;
            _leafStateList.Units = "NA";
            _leafStateList.URL = "http://";
            _leafStateList.ValueType = VarInfoValueTypes.GetInstanceForName("ListInteger");
            //   
            _isPrematurelyDying.Name = "isPrematurelyDying";
            _isPrematurelyDying.Description = " ";
            _isPrematurelyDying.MaxValue = 1D;
            _isPrematurelyDying.MinValue = 0D;
            _isPrematurelyDying.DefaultValue = 0D;
            _isPrematurelyDying.Units = "NA";
            _isPrematurelyDying.URL = "http://";
            _isPrematurelyDying.ValueType = VarInfoValueTypes.GetInstanceForName("ListInteger");
            //   
            _tilleringProfile.Name = "tilleringProfile";
            _tilleringProfile.Description = " ";
            _tilleringProfile.MaxValue = 0D;
            _tilleringProfile.MinValue = 0D;
            _tilleringProfile.DefaultValue = 0D;
            _tilleringProfile.Units = " ";
            _tilleringProfile.URL = "http://";
            _tilleringProfile.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _leafTillerNumberArray.Name = "leafTillerNumberArray";
            _leafTillerNumberArray.Description = " ";
            _leafTillerNumberArray.MaxValue = 0D;
            _leafTillerNumberArray.MinValue = 0D;
            _leafTillerNumberArray.DefaultValue = 0D;
            _leafTillerNumberArray.Units = " ";
            _leafTillerNumberArray.URL = "http://";
            _leafTillerNumberArray.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _deltaTTCanopyHourly.Name = "deltaTTCanopyHourly";
            _deltaTTCanopyHourly.Description = "";
            _deltaTTCanopyHourly.MaxValue = 0D;
            _deltaTTCanopyHourly.MinValue = 0D;
            _deltaTTCanopyHourly.DefaultValue = 0D;
            _deltaTTCanopyHourly.Units = "°C/d";
            _deltaTTCanopyHourly.URL = "http://";
            _deltaTTCanopyHourly.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _VPDeq.Name = "VPDeq";
            _VPDeq.Description = "";
            _VPDeq.MaxValue = 0D;
            _VPDeq.MinValue = 0D;
            _VPDeq.DefaultValue = 0D;
            _VPDeq.Units = "hPa";
            _VPDeq.URL = "http://";
            _VPDeq.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _hLER.Name = "hLER";
            _hLER.Description = " ";
            _hLER.MaxValue = 0D;
            _hLER.MinValue = 0D;
            _hLER.DefaultValue = 0D;
            _hLER.Units = " ";
            _hLER.URL = "http://";
            _hLER.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _LER.Name = "LER";
            _LER.Description = " ";
            _LER.MaxValue = 0D;
            _LER.MinValue = 0D;
            _LER.DefaultValue = 0D;
            _LER.Units = " ";
            _LER.URL = "http://";
            _LER.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _cumulTTPHenoMaize.Name = "cumulTTPHenoMaize";
            _cumulTTPHenoMaize.Description = "";
            _cumulTTPHenoMaize.MaxValue = 10000D;
            _cumulTTPHenoMaize.MinValue = 0D;
            _cumulTTPHenoMaize.DefaultValue = 0D;
            _cumulTTPHenoMaize.Units = "°C/d";
            _cumulTTPHenoMaize.URL = "http://";
            _cumulTTPHenoMaize.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _deltaTTPhenoMaize.Name = "deltaTTPhenoMaize";
            _deltaTTPhenoMaize.Description = "";
            _deltaTTPhenoMaize.MaxValue = 50D;
            _deltaTTPhenoMaize.MinValue = 0D;
            _deltaTTPhenoMaize.DefaultValue = 10D;
            _deltaTTPhenoMaize.Units = "°C/d";
            _deltaTTPhenoMaize.URL = "http://";
            _deltaTTPhenoMaize.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _WaterLimitedPotExposedDeltaAIList.Name = "WaterLimitedPotExposedDeltaAIList";
            _WaterLimitedPotExposedDeltaAIList.Description = "list on each phytomer";
            _WaterLimitedPotExposedDeltaAIList.MaxValue = 0D;
            _WaterLimitedPotExposedDeltaAIList.MinValue = 0D;
            _WaterLimitedPotExposedDeltaAIList.DefaultValue = 0D;
            _WaterLimitedPotExposedDeltaAIList.Units = " ";
            _WaterLimitedPotExposedDeltaAIList.URL = "http://";
            _WaterLimitedPotExposedDeltaAIList.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
        }
        #endregion
    }
}
