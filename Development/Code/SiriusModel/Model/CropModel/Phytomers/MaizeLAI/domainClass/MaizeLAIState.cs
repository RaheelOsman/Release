//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file C:\Users\mouginot\Desktop\sirius\branches\MouginotJuly\Code\SiriusModel\Model\CropModel\Phytomers\MaizeLAI\XML\SiriusQualityMaizeLAI_MaizeLAIState.xml
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// MyName MyLastname
/// myemail@mydomain.com
/// MyInstitution
/// www.myinstitution.org
/// 
/// 15/12/2016 12:19:12 PM
/// 
namespace SiriusQualityMaizeLAI
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using CRA.ModelLayer.Core;
    using CRA.ModelLayer.ParametersManagement;
    using SiriusModel.Model.CropModel.Phytomers;
    
    
    /// <summary>MaizeLAIState Domain class contains the accessors to values</summary>
    [Serializable()]
    public class MaizeLAIState : ICloneable, IDomainClass
    {
        
        #region Private fields
        private int _newLeafHasAppeared;
        
        private double _leafNumber;
        
        private double _finalLeafNumber;
        
        private int _roundedFinalLeafNumber;
        
        private int _isSmallPhytomer;
        
        private int _phytonum;
        
        private int _index;
        
        private System.Collections.Generic.List<double> _MaximumPotentialLaminaeAI = new List<double>();
        
        private System.Collections.Generic.List<double> _MaximumPotentialSheathAI = new List<double>();
        
        private double _FPAW;
        
        private int _isPotentialLAI;
        
        private double _VPDairCanopy;
        
        private double _DSF;
        
        private double _DEF;
        
        private double _incDeltaAreaLimitSF;
        
        private System.Collections.Generic.List<double> _WaterLimitedPotDeltaAIList = new List<double>();
        
        private double _potentialIncDeltaArea;

        private System.Collections.Generic.List<LeafState> _leafStateList = new List<LeafState>();
        
        private System.Collections.Generic.List<int> _isPrematurelyDying = new List<int>();
        
        private System.Collections.Generic.List<double> _tilleringProfile = new List<double>();
        
        private System.Collections.Generic.List<double> _leafTillerNumberArray = new List<double>();
        
        private double[] _deltaTTCanopyHourly = new double[24];
        
        private double[] _VPDeq = new double[24];
        
        private double[] _hLER = new double[24];
        
        private double _LER;
        
        private double _cumulTTPHenoMaize;
        
        private double _deltaTTPhenoMaize;
        
        private System.Collections.Generic.List<double> _WaterLimitedPotExposedDeltaAIList = new List<double>();
        #endregion
        
        #region Private field for properties
        private ParametersIO _parametersIO;
        #endregion
        
        #region Constructor
        /// <summary>No parameters constructor</summary>
        public MaizeLAIState()
        {
            _parametersIO = new ParametersIO(this);
        }


        public MaizeLAIState(MaizeLAIState toCopy, bool copyAll)
        {
            _LER = toCopy.LER;
        
            if (copyAll)
            {
            _newLeafHasAppeared =toCopy.newLeafHasAppeared;
        
            _leafNumber=toCopy.leafNumber;
        
            _finalLeafNumber=toCopy.finalLeafNumber;

            _roundedFinalLeafNumber = toCopy.roundedFinalLeafNumber;
        
            _isSmallPhytomer= toCopy.isSmallPhytomer;
        
            _phytonum=toCopy.phytonum;
        
            _index=toCopy.index;     
        
            _FPAW=toCopy.FPAW;
        
            _isPotentialLAI=toCopy.isPotentialLAI;
        
            _VPDairCanopy=toCopy.VPDairCanopy;
        
            _DSF=toCopy.DSF;
        
            _DEF=toCopy.DEF;
        
            _incDeltaAreaLimitSF=toCopy.incDeltaAreaLimitSF;      
        
            _potentialIncDeltaArea=toCopy.potentialIncDeltaArea;

                _deltaTTCanopyHourly = new double[24];
                _VPDeq =new double[24];
                _hLER =new double[24];
            for (int i = 0; i < 24; i++)
            {

                _deltaTTCanopyHourly[i] = toCopy._deltaTTCanopyHourly[i];

                _VPDeq[i]=toCopy._VPDeq[i];

                _hLER[i]=toCopy.hLER[i];
            }
        
            
            _cumulTTPHenoMaize =toCopy.cumulTTPHenoMaize;
        
            _deltaTTPhenoMaize =toCopy.deltaTTPhenoMaize;
        
                
            System.Collections.Generic.List<double> _WaterLimitedPotExposedDeltaAIList = new List<double>(toCopy.WaterLimitedPotExposedDeltaAIList);
           
            System.Collections.Generic.List<LeafState> _leafStateList = new List<LeafState>(toCopy._leafStateList);
        
            System.Collections.Generic.List<int> _isPrematurelyDying = new List<int>(toCopy._isPrematurelyDying);
        
            System.Collections.Generic.List<double> _tilleringProfile = new List<double>(toCopy._tilleringProfile);
        
            System.Collections.Generic.List<double> _leafTillerNumberArray = new List<double>(toCopy._leafTillerNumberArray);

            System.Collections.Generic.List<double> _MaximumPotentialLaminaeAI = new List<double>(toCopy._MaximumPotentialLaminaeAI);
        
            System.Collections.Generic.List<double> _MaximumPotentialSheathAI = new List<double>(toCopy._MaximumPotentialSheathAI);
            System.Collections.Generic.List<double> _WaterLimitedPotDeltaAIList = new List<double>(toCopy._WaterLimitedPotDeltaAIList);
            }
        }
        #endregion
        
        #region Public properties
        /// <summary></summary>
        public int newLeafHasAppeared
        {
            get
            {
                return this._newLeafHasAppeared;
            }
            set
            {
                this._newLeafHasAppeared = value;
            }
        }
        
        /// <summary> </summary>
        public double leafNumber
        {
            get
            {
                return this._leafNumber;
            }
            set
            {
                this._leafNumber = value;
            }
        }
        
        /// <summary> </summary>
        public double finalLeafNumber
        {
            get
            {
                return this._finalLeafNumber;
            }
            set
            {
                this._finalLeafNumber = value;
            }
        }
        
        /// <summary> </summary>
        public int roundedFinalLeafNumber
        {
            get
            {
                return this._roundedFinalLeafNumber;
            }
            set
            {
                this._roundedFinalLeafNumber = value;
            }
        }
        
        /// <summary>true if the last phytomer appeared is "small"</summary>
        public int isSmallPhytomer
        {
            get
            {
                return this._isSmallPhytomer;
            }
            set
            {
                this._isSmallPhytomer = value;
            }
        }
        
        /// <summary>phytonum of the last phytomer appeared</summary>
        public int phytonum
        {
            get
            {
                return this._phytonum;
            }
            set
            {
                this._phytonum = value;
            }
        }
        
        /// <summary>index of the  last phytomer</summary>
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                this._index = value;
            }
        }
        
        /// <summary> </summary>
        public System.Collections.Generic.List<double> MaximumPotentialLaminaeAI
        {
            get
            {
                return this._MaximumPotentialLaminaeAI;
            }
            set
            {
                this._MaximumPotentialLaminaeAI = value;
            }
        }
        
        /// <summary> </summary>
        public System.Collections.Generic.List<double> MaximumPotentialSheathAI
        {
            get
            {
                return this._MaximumPotentialSheathAI;
            }
            set
            {
                this._MaximumPotentialSheathAI = value;
            }
        }
        
        /// <summary>Fraction of plant available water</summary>
        public double FPAW
        {
            get
            {
                return this._FPAW;
            }
            set
            {
                this._FPAW = value;
            }
        }
        
        /// <summary> </summary>
        public int isPotentialLAI
        {
            get
            {
                return this._isPotentialLAI;
            }
            set
            {
                this._isPotentialLAI = value;
            }
        }
        
        /// <summary> </summary>
        public double VPDairCanopy
        {
            get
            {
                return this._VPDairCanopy;
            }
            set
            {
                this._VPDairCanopy = value;
            }
        }
        
        /// <summary>drought senescence factor</summary>
        public double DSF
        {
            get
            {
                return this._DSF;
            }
            set
            {
                this._DSF = value;
            }
        }
        
        /// <summary>drought expansion factor</summary>
        public double DEF
        {
            get
            {
                return this._DEF;
            }
            set
            {
                this._DEF = value;
            }
        }
        
        /// <summary> </summary>
        public double incDeltaAreaLimitSF
        {
            get
            {
                return this._incDeltaAreaLimitSF;
            }
            set
            {
                this._incDeltaAreaLimitSF = value;
            }
        }
        
        /// <summary>list on each phytomer</summary>
        public System.Collections.Generic.List<double> WaterLimitedPotDeltaAIList
        {
            get
            {
                return this._WaterLimitedPotDeltaAIList;
            }
            set
            {
                this._WaterLimitedPotDeltaAIList = value;
            }
        }
        
        /// <summary> </summary>
        public double potentialIncDeltaArea
        {
            get
            {
                return this._potentialIncDeltaArea;
            }
            set
            {
                this._potentialIncDeltaArea = value;
            }
        }
        
        /// <summary> see the LeafState enum</summary>
        public System.Collections.Generic.List<LeafState> leafStateList
        {
            get
            {
                return this._leafStateList;
            }
            set
            {
                this._leafStateList = value;
            }
        }
        
        /// <summary> </summary>
        public System.Collections.Generic.List<int> isPrematurelyDying
        {
            get
            {
                return this._isPrematurelyDying;
            }
            set
            {
                this._isPrematurelyDying = value;
            }
        }
        
        /// <summary> </summary>
        public System.Collections.Generic.List<double> tilleringProfile
        {
            get
            {
                return this._tilleringProfile;
            }
            set
            {
                this._tilleringProfile = value;
            }
        }
        
        /// <summary> </summary>
        public System.Collections.Generic.List<double> leafTillerNumberArray
        {
            get
            {
                return this._leafTillerNumberArray;
            }
            set
            {
                this._leafTillerNumberArray = value;
            }
        }
        
        /// <summary></summary>
        public double[] deltaTTCanopyHourly
        {
            get
            {
                return this._deltaTTCanopyHourly;
            }
            set
            {
                this._deltaTTCanopyHourly = value;
            }
        }
        
        /// <summary></summary>
        public double[] VPDeq
        {
            get
            {
                return this._VPDeq;
            }
            set
            {
                this._VPDeq = value;
            }
        }
        
        /// <summary> </summary>
        public double[] hLER
        {
            get
            {
                return this._hLER;
            }
            set
            {
                this._hLER = value;
            }
        }
        
        /// <summary> </summary>
        public double LER
        {
            get
            {
                return this._LER;
            }
            set
            {
                this._LER = value;
            }
        }
        
        /// <summary></summary>
        public double cumulTTPHenoMaize
        {
            get
            {
                return this._cumulTTPHenoMaize;
            }
            set
            {
                this._cumulTTPHenoMaize = value;
            }
        }
        
        /// <summary></summary>
        public double deltaTTPhenoMaize
        {
            get
            {
                return this._deltaTTPhenoMaize;
            }
            set
            {
                this._deltaTTPhenoMaize = value;
            }
        }
        
        /// <summary>list on each phytomer</summary>
        public System.Collections.Generic.List<double> WaterLimitedPotExposedDeltaAIList
        {
            get
            {
                return this._WaterLimitedPotExposedDeltaAIList;
            }
            set
            {
                this._WaterLimitedPotExposedDeltaAIList = value;
            }
        }
        #endregion
        
        #region IDomainClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "Domain class description";
            }
        }
        
        /// <summary>Domain Class URL</summary>
        public virtual  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Domain Class Properties</summary>
        public virtual IDictionary<string, PropertyInfo> PropertiesDescription
        {
            get
            {
                return _parametersIO.GetCachedProperties(typeof(IDomainClass));
            }
        }
        #endregion
        
        /// <summary>Clears the values of the properties of the domain class by using the default value for the type of each property (e.g '0' for numbers, 'the empty string' for strings, etc.)</summary>
        public virtual Boolean ClearValues()
        {
            _newLeafHasAppeared = default(System.Int32);
            _leafNumber = default(System.Double);
            _finalLeafNumber = default(System.Double);
            _roundedFinalLeafNumber = default(System.Int32);
            _isSmallPhytomer = default(System.Int32);
            _phytonum = default(System.Int32);
            _index = default(System.Int32);
            _MaximumPotentialLaminaeAI = new List<double>();
            _MaximumPotentialSheathAI = new List<double>();
            _FPAW = default(System.Double);
            _isPotentialLAI = default(System.Int32);
            _VPDairCanopy = default(System.Double);
            _DSF = default(System.Double);
            _DEF = default(System.Double);
            _incDeltaAreaLimitSF = default(System.Double);
            _WaterLimitedPotDeltaAIList = new List<double>();
            _potentialIncDeltaArea = default(System.Double);
            _leafStateList = new List<LeafState>();
            _isPrematurelyDying = new List<int>();
            _tilleringProfile = new List<double>();
            _leafTillerNumberArray = new List<double>();
            _deltaTTCanopyHourly = new double[24];
            _VPDeq = new double[24];
            _hLER = new double[24];
            _LER = default(System.Double);
            _cumulTTPHenoMaize = default(System.Double);
            _deltaTTPhenoMaize = default(System.Double);
            _WaterLimitedPotExposedDeltaAIList = new List<double>();
            // Returns true if everything is ok
            return true;
        }
        
        #region Clone
        /// <summary>Implement ICloneable.Clone()</summary>
        public virtual Object Clone()
        {
            // Shallow copy by default
            IDomainClass myclass = (IDomainClass) this.MemberwiseClone();
            _parametersIO.PopulateClonedCopy(myclass);
            return myclass;
        }
        #endregion
    }
}
